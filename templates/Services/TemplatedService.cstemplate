using AutoMapper;
using %%=Namespace%%.Contracts.%%=ClassPluralized%%;
using %%=Namespace%%.Models;
using %%=Namespace%%.Repositories.%%=ClassPluralized%%;
using %%=Namespace%%.Utils.ExtensionMethods;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Threading.Tasks;
using System.Security.Claims;
using %%=Namespace%%.Utils.TransactionTracing;
using %%=Namespace%%.Services.Security;
using %%=Namespace%%.Contracts;
using %%=Namespace%%.Utils.ResultManagement;

namespace %%=Namespace%%.Services.%%=ClassPluralized%%
{
    public class %%=ClassPluralized%%Service : I%%=ClassPluralized%%Service
    {
        private readonly ISecurityService _securityService;
        private readonly ILogger<I%%=ClassPluralized%%Service> _logger;
        private readonly I%%=ClassPluralized%%Repository _%%=ClassPluralized-%%Repository;
        private readonly IMapper _mapper;
        private readonly ITransactionTracing _transactionTracing;

        public %%=ClassPluralized%%Service(
            ISecurityService securityService,
            I%%=ClassPluralized%%Repository %%=ClassPluralized-%%Repository,
            IMapper mapper,
            ILogger<I%%=ClassPluralized%%Service> logger,
            ITransactionTracing transactionTracing)
            => (_securityService, _%%=ClassPluralized-%%Repository, _mapper, _logger, _transactionTracing)
            = (securityService, %%=ClassPluralized-%%Repository, mapper, logger, transactionTracing);

        public async Task<IEnumerable<ContractResponse<%%=Class%%>>> GetAvailable%%=ClassPluralized%%Async(ClaimsPrincipal user, Guid customerId)
        {
            if (!await _securityService.IsAdminAsync(user, customerId))
                return null;

            var dal = await _%%=ClassPluralized-%%Repository.GetAvailable%%=ClassPluralized%%FromDbAsync(customerId);
            var response = _mapper.Map<IList<ContractResponse<%%=Class%%>>>(dal);

            _logger.LogServiceListAction(_transactionTracing, user, "requested available %%=ClassPluralized%%", response);

            return response;
        }

        public async Task<ContractResponse<%%=Class%%>> Get%%=Class%%Async(ClaimsPrincipal user, Guid customerId, Guid %%=Object%%Id)
        {
            if (!await _securityService.IsAdminAsync(user, customerId))
                return null;
            
            var dal = await _%%=ClassPluralized-%%Repository.Get%%=Class%%FromDbAsync(customerId, %%=Object%%Id);
            var response = _mapper.Map<ContractResponse<%%=Class%%>>(dal);

            _logger.LogServiceAction(_transactionTracing, user, $"requested %%=Class-%% by id {%%=Object%%Id}", response);

            return response;
        }

        public async Task<ContractResponse<%%=Class%%>> Create%%=Class%%Async(ClaimsPrincipal user, Guid customerId, %%=Class%% %%=Object%%)
        {
            if (!await _securityService.IsAdminAsync(user, customerId))
                return null;

            var dal = _mapper.Map<%%=Class%%DAL>(%%=Object%%);
            dal.Initialize(user.UserId());

            var repoResponse 
                = await _%%=ClassPluralized-%%Repository.Create%%=Class%%InDbAsync(dal);

            var result = _mapper.Map<ContractResponse<%%=Class%%>>(repoResponse);

            _logger.LogServiceAction(_transactionTracing, user, "created %%=Class-%%", result);

            return result;
        }

        public async Task<Result<ContractResponse<%%=Class%%>>> Duplicate%%=Class%%Async(ClaimsPrincipal user, Guid customerId, Guid %%=Object%%Id)
        {
            if (!_securityService.IsSuperAdmin(user))
                return null;

            var dal = await _%%=ClassPluralized-%%Repository.Get%%=Class%%FromDbAsync(customerId, %%=Object%%Id);
            if (dal == null)
                return Result.Fail<ContractResponse<%%=Class%%>>($"%%=Class%% {%%=Object%%Id} not found");

            try
            {
                var existing = _mapper.Map<%%=Class%%>(dal);
                existing.Name = $"Copy of {existing.Name}";

                var duplicate = _mapper.Map<%%=Class%%DAL>(existing);
                duplicate.Initialize(user.UserId());

                var repoResponse = await _%%=ClassPluralized-%%Repository.Create%%=Class%%InDbAsync(duplicate);

                var response = _mapper.Map<ContractResponse<%%=Class%%>>(repoResponse);
                _logger.LogServiceAction(_transactionTracing, user, "duplicated %%=Class-%%", response);

                //TODO: add downstream services duplication if needed

                return Result.Ok(response);
            }
            catch (Exception ex)
            {
                return Result.Fail<ContractResponse<%%=Class%%>>(ex.Message);
            }
        }

        public async Task<Result<ContractResponse<%%=Class%%>>> Update%%=Class%%Async(ClaimsPrincipal user, Guid customerId, Guid %%=Object%%Id, %%=Class%% %%=Object%%)
        {
            if (!await _securityService.IsAdminAsync(user, customerId))
                return null;

            var current%%=Class%% = await Get%%=Class%%Async(user, customerId, %%=Object%%Id);

            if (current%%=Class%% == null)
                return Result.Fail<ContractResponse<%%=Class%%>>($"%%=Class%% {%%=Object%%Id} not found");

            try
            {
                var dal = _mapper.Map<%%=Class%%DAL>(%%=Object%%);
                dal.Update(current%%=Class%%.Id, current%%=Class%%.CreatedBy, current%%=Class%%.CreatedDate, user.UserId());

                var repoResponse
                    = await _%%=ClassPluralized-%%Repository.Update%%=Class%%InDbAsync(dal);

                var loc = _mapper.Map<ContractResponse<%%=Class%%>>(repoResponse);

                _logger.LogServiceAction(_transactionTracing, user, "updated %%=Class-%%", loc);

                return Result.Ok(loc);
            }
            catch (Exception ex)
            {
                return Result.Fail<ContractResponse<%%=Class%%>>(ex.Message);
            }
        }

        public async Task<Result> Delete%%=Class%%Async(ClaimsPrincipal user, Guid customerId, Guid %%=Object%%Id)
        {
            if (!await _securityService.IsAdminAsync(user, customerId))
                return null;

            var current%%=Class%% = await Get%%=Class%%Async(user, customerId, %%=Object%%Id);

            if (current%%=Class%% == null)
                return Result.Fail($"%%=Class%% {%%=Object%%Id} not found");

            try
            {
                var dal = _mapper.Map<%%=Class%%DAL>(current%%=Class%%);
                dal.Id = current%%=Class%%.Id;

                await _%%=ClassPluralized-%%Repository.Delete%%=Class%%FromDbAsync(dal);

                _logger.LogServiceAction(_transactionTracing, user, "deleted %%=Class-%%", %%=Object%%Id);
                return Result.Ok();
            }
            catch (Exception ex)
            {
                return Result.Fail(ex.Message);
            }
        }
    }
}
