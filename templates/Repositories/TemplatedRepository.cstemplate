using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Diagnostics.CodeAnalysis;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using %%=Namespace%%.Models;
using %%=Namespace%%.Models.%%=ClassPluralized%%;
using %%=Namespace%%.Repositories.ExtensionMethods;

namespace %%=Namespace%%.Repositories.%%=ClassPluralized%%
{
    public class %%=ClassPluralized%%Repository : I%%=ClassPluralized%%Repository
    {
        private readonly ILogger<I%%=ClassPluralized%%Repository> _logger;
        private readonly Box2MContext _context;

        public %%=ClassPluralized%%Repository(
            Box2MContext context, ILogger<I%%=ClassPluralized%%Repository> logger)
            => (_context, _logger)
            = (context, logger);

        public async Task<IList<%%=Class%%DAL>> GetAvailable%%=ClassPluralized%%FromDbAsync(Guid userId)
        {
            var %%=ObjectPluralized%% = await _context.%%=ClassPluralized%%.AsNoTracking().ToListAsync();

            _logger.LogUserRepoAction(userId, "requested available %%=ClassPluralized%%", %%=ObjectPluralized%%.Select(t => t.Key));

            return %%=ObjectPluralized%%;
        }

        public async Task<%%=Class%%DAL> Get%%=Class%%FromDbAsync(Guid userId, string key)
        {
            var %%=Object%% = await _context.%%=ClassPluralized%%.AsNoTracking()
                .SingleOrDefaultAsync(
                    t => t.Key == key &&
                        t.%%=Class%%Users.Any(x => x.UserId == userId));

            _logger.LogUserRepoAction(userId, "requested %%=Class%%", %%=Object%%?.Key);

            return %%=Object%%;
        }

        public async Task<%%=Class%%DAL> Create%%=Class%%DbAsync(Guid userId, [NotNull] %%=Class%%DAL %%=Object%%)
        {
            _context.%%=ClassPluralized%%.Add(%%=Object%%);
            await _context.SaveChangesAsync();

            _logger.LogUserRepoAction(userId, "created new %%=Class%%", %%=Object%%?.Key);

            return %%=Object%%;
        }
    }
}
