using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Diagnostics.CodeAnalysis;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using %%=Namespace%%.Models;
using %%=Namespace%%.ExtensionMethods;
using %%=Lib%%.Transactions;
using %%=Lib%%.Logging;

namespace %%=Namespace%%.Repositories.%%=ClassPluralized%%
{
    public class %%=ClassPluralized%%Repository : I%%=ClassPluralized%%Repository
    {
        private readonly %%=DbContext%% _context;
        private readonly ILogger<I%%=ClassPluralized%%Repository> _logger;        
        private readonly ITransactionTracing _transactionTracing;

        public %%=ClassPluralized%%Repository(
            %%=DbContext%% context, 
            ILogger<I%%=ClassPluralized%%Repository> logger,
            ITransactionTracing transactionTracing)
            => (_context, _logger, _transactionTracing)
            = (context, logger, transactionTracing);

        public async Task<IList<%%=Class%%DAL>> Get%%=ClassPluralized%%FromDbAsync(Guid customerId)
        {
            var %%=ObjectPluralized%% = await _context.%%=ClassPluralized%%.AsNoTracking()
                .Where(t => t.CustomerId == customerId)
                .ToListAsync();

            _logger.LogRepoListAction(_transactionTracing, "requested %%=ClassPluralized-%%", %%=ObjectPluralized%%);

            return %%=ObjectPluralized%%;
        }

        public async Task<%%=Class%%DAL> Get%%=Class%%FromDbAsync(Guid customerId, Guid %%=Object%%Id)
        {
            var %%=Object%% = await _context.%%=ClassPluralized%%.AsNoTracking()
                .SingleOrDefaultAsync(t => t.Id == %%=Object%%Id && t.CustomerId == customerId);

            _logger.LogRepoAction(_transactionTracing, "requested %%=Class-%%", %%=Object%%);

            return %%=Object%%;
        }

        public async Task<%%=Class%%DAL> Create%%=Class%%InDbAsync([NotNull] %%=Class%%DAL %%=Object%%)
        {
            _context.%%=ClassPluralized%%.Add(%%=Object%%);
            await _context.SaveChangesAsync();

            _logger.LogRepoAction(_transactionTracing, "created new %%=Class-%%", %%=Object%%);

            return %%=Object%%;
        }

        public async Task<%%=Class%%DAL> Update%%=Class%%InDbAsync([NotNull] %%=Class%%DAL %%=Object%%)
        {
            _context.Entry(%%=Object%%).State = EntityState.Modified;
            await _context.SaveChangesAsync();

            _logger.LogRepoAction(_transactionTracing, "updated %%=Class-%%", %%=Object%%);

            return %%=Object%%;
        }

        public async Task Delete%%=Class%%FromDbAsync([NotNull] %%=Class%%DAL %%=Object%%)
        {
            _context.%%=ClassPluralized%%.Remove(%%=Object%%);
            await _context.SaveChangesAsync();

            _logger.LogRepoAction(_transactionTracing, "deleted %%=Class-%%", %%=Object%%.Id);
        }
    }
}
