using System;
using System.Linq;
using System.Threading.Tasks;
using %%=Namespace%%.Contracts.%%=ClassPluralized%%;
using %%=Namespace%%.ExtensionMethods;
using %%=Namespace%%.Services.%%=ClassPluralized%%;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;

namespace %%=Namespace%%.Controllers
{
    [Route("v1/%%=Class%%/")]
    [ApiController]
    public class %%=ClassPluralized%%Controller : BaseApiController
    {
        private readonly I%%=ClassPluralized%%Service _%%=ClassPluralized%%Service;
        private readonly ILogger<%%=ClassPluralized%%Controller> _logger;

        public %%=ClassPluralized%%Controller(
            I%%=ClassPluralized%%Service %%=ClassPluralized%%Service,
            ILogger<%%=ClassPluralized%%Controller> logger)
            => (_%%=ClassPluralized%%Service, _logger)
            = (%%=ClassPluralized%%Service, logger);

        [HttpGet]
        [ProducesResponseType(StatusCodes.Status200OK)]
        public async Task<IActionResult> Get()
        {
            var results = await _%%=ClassPluralized%%Service.GetAvailable%%=ClassPluralized%%Async(User.UserId());
            _logger.LogUserControllerAction(User.UserId(), "requested available %%=ClassPluralized%%", results);

            return Ok(results);
        }

        [HttpGet("{id}")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesDefaultResponseType]
        public async Task<IActionResult> Get([FromRoute] Guid id)
        {
            var result = await _%%=ClassPluralized%%Service.Get%%=Class%%Async(User.UserId(), id);
            _logger.LogUserControllerAction(User.UserId(), "requested %%=Class%%", result);

            return result != null ? Ok(result) : (IActionResult)NotFound();
        }

        [HttpPost]
        [ProducesResponseType(StatusCodes.Status201Created)]
        [ProducesDefaultResponseType]
        public async Task<IActionResult> Post([FromBody] %%=Class%%CreateRequest %%=Object%%)
        {
            var result = await _%%=ClassPluralized%%Service.Create%%=Class%%Async(User.UserId(), %%=Object%%);
            _logger.LogUserControllerAction(User.UserId(), "created %%=Class%%", result);

            return CreatedAtAction("Get", new { id = result.Id }, result);
        }

        [HttpPut("{id}")]
        public void Put(Guid id, [FromBody] string value)
        {
        }

        [HttpDelete("{id}")]
        public void Delete(Guid id)
        {
        }
    }
}
