using System;
using System.Linq;
using System.Threading.Tasks;
using %%=Namespace%%.Contracts.%%=ClassPluralized%%;
using %%=Namespace%%.ExtensionMethods;
using %%=Namespace%%.Utils.ExtensionMethods;
using %%=Namespace%%.Services.%%=ClassPluralized%%;
using %%=Namespace%%.Utils.TransactionTracing;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;

namespace %%=Namespace%%.Controllers
{
    [Route("v1/org/{orgId}/%%=Class%%/")]
    [ApiController]
    public class %%=ClassPluralized%%Controller : BaseApiController
    {
        private readonly I%%=ClassPluralized%%Service _%%=ClassPluralized-%%Service;
        private readonly ILogger<%%=ClassPluralized%%Controller> _logger;
        private readonly ITransactionTracing _transactionTracing;

        public %%=ClassPluralized%%Controller(
            I%%=ClassPluralized%%Service %%=ClassPluralized-%%Service,
            ILogger<%%=ClassPluralized%%Controller> logger,
            ITransactionTracing transactionTracing)     
            => (_%%=ClassPluralized-%%Service, _logger, _transactionTracing)
            = (%%=ClassPluralized-%%Service, logger, transactionTracing);

        [HttpGet]
        [ProducesResponseType(StatusCodes.Status200OK)]
        public async Task<IActionResult> Get([FromRoute] Guid orgId)
        {
            var results = await _%%=ClassPluralized-%%Service.GetAvailable%%=ClassPluralized%%Async(User.UserId());
            _logger.LogControllerListAction(_transactionTracing, User.UserId(), "requested available %%=ClassPluralized%%", results);

            return Ok(results);
        }

        [HttpGet("{%%=Object%%Id}")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesDefaultResponseType]
        public async Task<IActionResult> Get([FromRoute] Guid orgId, [FromRoute] Guid %%=Object%%Id)
        {
            var result = await _%%=ClassPluralized-%%Service.Get%%=Class%%Async(User.UserId(), %%=Object%%Id);
            _logger.LogControllerAction(_transactionTracing, User.UserId(), "requested %%=Class%%", result);

            return result != null ? Ok(result) : (IActionResult)NotFound();
        }

        [HttpPost]
        [ProducesResponseType(StatusCodes.Status201Created)]
        [ProducesDefaultResponseType]
        public async Task<IActionResult> Post([FromRoute] Guid orgId, [FromBody] %%=Class%%CreateRequest %%=Object%%)
        {
            var result = await _%%=ClassPluralized-%%Service.Create%%=Class%%Async(User.UserId(), %%=Object%%);
            _logger.LogControllerAction(_transactionTracing, User.UserId(), "created %%=Class%%", result);

            return CreatedAtAction("Get", new { %%=Object%%Id = result.Id }, result);
        }

        [HttpPut("{%%=Object%%Id}")]
        public void Put([FromRoute] Guid orgId, [FromRoute] Guid %%=Object%%Id, [FromBody] string value)
        {
        }

        [HttpDelete("{%%=Object%%Id}")]
        public void Delete([FromRoute] Guid orgId, [FromRoute] Guid %%=Object%%Id)
        {
        }
    }
}
